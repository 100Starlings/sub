#!/usr/bin/env bash
set -e

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

libexec_path="$(abs_dirname "$0")"
export _SUB_ROOT="$(abs_dirname "$libexec_path")"
export PATH="${libexec_path}:$PATH"

# setup the correct Ruby version and Gemfile
ruby_version=$(cat ${_SUB_ROOT}/.ruby-version)
export RBENV_VERSION=$ruby_version
export ASDF_RUBY_VERSION=$ruby_version
export RUBYLIB="${_SUB_ROOT}/lib:$RUBYLIB"
export BUNDLE_GEMFILE="${_SUB_ROOT}/Gemfile"

# Common functions and variables
source $_SUB_ROOT/lib/shellutils.sh
[[ -f $_SUB_ROOT/secrets.sh ]] && source $_SUB_ROOT/secrets.sh

command="$1"
while true; do
  case "$command" in
  "" | "-h" | "--help" )
    exec sub-help
    ;;
  * )
    command_path="$libexec_path/sub-$command"
    if [ -d $command_path ]; then
      if [ $# -gt 1 ]; then
        shift
        command="$command/$1"
      else
        exec sub-help "$command"
      fi

    elif [ -x "$command_path" ]; then
      shift
      exec "$command_path" "$@"

    else
      command_path="$(command -v "sub-$command" || true)"
      if [ -x "$command_path" ]; then
        shift
        exec "$command_path" "$@"
      else
        echo "sub: no such command \`${command//\// }'" >&2
        exit 1
      fi
    fi
    ;;
  esac
done
